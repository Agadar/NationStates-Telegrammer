package com.github.agadar.nstelegram;

import com.github.agadar.nsapi.event.TelegramSentEvent;
import com.github.agadar.nsapi.event.TelegramSentListener;
import com.github.agadar.nstelegram.filter.FilterAll;
import com.github.agadar.nstelegram.filter.FilterDelegates;
import com.github.agadar.nstelegram.filter.FilterDelegatesNew;
import com.github.agadar.nstelegram.filter.FilterNations;
import com.github.agadar.nstelegram.filter.FilterNationsEjected;
import com.github.agadar.nstelegram.filter.FilterNationsNew;
import com.github.agadar.nstelegram.filter.FilterNationsRefounded;
import com.github.agadar.nstelegram.filter.FilterRegions;
import com.github.agadar.nstelegram.filter.FilterRegionsWithTags;
import com.github.agadar.nstelegram.filter.FilterRegionsWithoutTags;
import com.github.agadar.nstelegram.filter.FilterWAMembers;
import com.github.agadar.nstelegram.filter.abstractfilter.Filter;
import java.awt.event.ItemEvent;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.DefaultCaret;

/**
 * The main GUI of this application.
 *
 * @author Agadar <https://github.com/Agadar/>
 */
public class NSTelegramForm extends javax.swing.JFrame implements TelegramSentListener
{
    public final static String FORM_TITLE = "Agadar's NationStates Telegrammer 1.1.0"; // Form title.
    
    private final TelegramManager tm = new TelegramManager(); // Manages sending telegrams.
    private Thread worker;  // Thread used for compiling address lists.
    
    public NSTelegramForm()
    {
        initComponents();
        
        // Sets the output textarea such that it auto-scrolls down.
        ((DefaultCaret) TextAreaOutput.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        // Set fields according to values retrieved from properties file.
        final PropertiesManager ph = new PropertiesManager();
        ph.loadProperties();
        TxtFieldClientKey.setText(tm.ClientKey = ph.ClientKey);
        TxtFieldTelegramId.setText(tm.TelegramId = ph.TelegramId);
        TxtFieldSecretKey.setText(tm.SecretKey = ph.SecretKey);
        CheckBoxRecruiting.setSelected(tm.SendAsRecruitment = ph.IsRecruitment);
        
        // Set output textarea, for consistency's sake.
        TextAreaOutput.setText(duration());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        BtnGrpTelegramType = new javax.swing.ButtonGroup();
        PanelTelegram = new javax.swing.JPanel();
        LabelTelegramId = new javax.swing.JLabel();
        TxtFieldTelegramId = new javax.swing.JTextField();
        LabelSecretKey = new javax.swing.JLabel();
        TxtFieldSecretKey = new javax.swing.JTextField();
        LabelClientKey = new javax.swing.JLabel();
        LabelRecruiting = new javax.swing.JLabel();
        TxtFieldClientKey = new javax.swing.JTextField();
        LabelLoop = new javax.swing.JLabel();
        TextFieldFiller2 = new javax.swing.JTextField();
        TextFieldFiller1 = new javax.swing.JTextField();
        CheckBoxLoop = new javax.swing.JCheckBox();
        CheckBoxRecruiting = new javax.swing.JCheckBox();
        PanelFilters = new javax.swing.JPanel();
        ScrollPaneFilters = new javax.swing.JScrollPane();
        JListFilters = new javax.swing.JList<>();
        ButtonRemoveFilter = new javax.swing.JButton();
        ComboBoxFilterType = new javax.swing.JComboBox<>();
        TextFieldFilterValues = new javax.swing.JTextField();
        ButtonAddFilter = new javax.swing.JButton();
        PanelOutput = new javax.swing.JPanel();
        ScrollPaneOutput = new javax.swing.JScrollPane();
        TextAreaOutput = new javax.swing.JTextArea();
        PanelActions = new javax.swing.JPanel();
        BtnStart = new javax.swing.JButton();
        BtnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(NSTelegramForm.FORM_TITLE);
        setName("NSTelegramFrame"); // NOI18N
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        PanelTelegram.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Telegram", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        LabelTelegramId.setLabelFor(TxtFieldTelegramId);
        LabelTelegramId.setText("Telegram Id:");
        LabelTelegramId.setName("LabelTelegramId"); // NOI18N

        TxtFieldTelegramId.setName("TxtFieldTelegramId"); // NOI18N
        TxtFieldTelegramId.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                TxtFieldTelegramIdKeyReleased(evt);
            }
        });

        LabelSecretKey.setLabelFor(TxtFieldSecretKey);
        LabelSecretKey.setText("Secret Key:");
        LabelSecretKey.setName("LabelSecretKey"); // NOI18N

        TxtFieldSecretKey.setName("TxtFieldSecretKey"); // NOI18N
        TxtFieldSecretKey.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                TxtFieldSecretKeyKeyReleased(evt);
            }
        });

        LabelClientKey.setLabelFor(TxtFieldClientKey);
        LabelClientKey.setText("Client Key:");
        LabelClientKey.setName("LabelClientKey"); // NOI18N

        LabelRecruiting.setText("Recruiting:");
        LabelRecruiting.setName("LabelRecruiting"); // NOI18N

        TxtFieldClientKey.setName("TxtFieldClientKey"); // NOI18N
        TxtFieldClientKey.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                TxtFieldClientKeyKeyReleased(evt);
            }
        });

        LabelLoop.setText("Looping:");
        LabelLoop.setName("LabelSendAs"); // NOI18N

        TextFieldFiller2.setEditable(false);
        TextFieldFiller2.setEnabled(false);
        TextFieldFiller2.setVisible(false);
        TextFieldFiller2.setFocusable(false);
        TextFieldFiller2.setName("TxtFieldSecretKey"); // NOI18N
        TextFieldFiller2.setRequestFocusEnabled(false);

        TextFieldFiller1.setEditable(false);
        TextFieldFiller1.setEnabled(false);
        TextFieldFiller1.setVisible(false);
        TextFieldFiller1.setFocusable(false);
        TextFieldFiller1.setName("TxtFieldSecretKey"); // NOI18N
        TextFieldFiller1.setRequestFocusEnabled(false);

        CheckBoxLoop.setText(" ");
        CheckBoxLoop.setFocusPainted(false);
        CheckBoxLoop.setMargin(new java.awt.Insets(0, -1, 0, 2));
        CheckBoxLoop.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                CheckBoxLoopStateChanged(evt);
            }
        });

        CheckBoxRecruiting.setText(" ");
        CheckBoxRecruiting.setFocusPainted(false);
        CheckBoxRecruiting.setMargin(new java.awt.Insets(0, -1, 0, 2));
        CheckBoxRecruiting.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                CheckBoxRecruitingStateChanged(evt);
            }
        });

        javax.swing.GroupLayout PanelTelegramLayout = new javax.swing.GroupLayout(PanelTelegram);
        PanelTelegram.setLayout(PanelTelegramLayout);
        PanelTelegramLayout.setHorizontalGroup(
            PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTelegramLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelRecruiting)
                    .addComponent(LabelSecretKey)
                    .addComponent(LabelTelegramId)
                    .addComponent(LabelLoop)
                    .addComponent(LabelClientKey))
                .addGap(18, 18, 18)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TxtFieldClientKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtFieldTelegramId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelTelegramLayout.createSequentialGroup()
                        .addComponent(CheckBoxLoop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TextFieldFiller2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelTelegramLayout.createSequentialGroup()
                        .addComponent(CheckBoxRecruiting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TextFieldFiller1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TxtFieldSecretKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        PanelTelegramLayout.setVerticalGroup(
            PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTelegramLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelClientKey)
                    .addComponent(TxtFieldClientKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTelegramId)
                    .addComponent(TxtFieldTelegramId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelSecretKey)
                    .addComponent(TxtFieldSecretKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelRecruiting)
                    .addComponent(TextFieldFiller1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBoxRecruiting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelTelegramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelLoop)
                    .addComponent(TextFieldFiller2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBoxLoop))
                .addGap(29, 29, 29))
        );

        PanelFilters.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        PanelFilters.setPreferredSize(new java.awt.Dimension(289, 172));

        ScrollPaneFilters.setName("ScrollPaneFilters"); // NOI18N

        JListFilters.setModel(new DefaultListModel());
        JListFilters.setName("JListFilters"); // NOI18N
        JListFilters.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                JListFiltersValueChanged(evt);
            }
        });
        ScrollPaneFilters.setViewportView(JListFilters);

        ButtonRemoveFilter.setText("Remove filter");
        ButtonRemoveFilter.setEnabled(false);
        ButtonRemoveFilter.setName("ButtonRemoveFilter"); // NOI18N
        ButtonRemoveFilter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonRemoveFilterActionPerformed(evt);
            }
        });

        ComboBoxFilterType.setModel(new DefaultComboBoxModel(com.github.agadar.nstelegram.FilterType.getTexts()));
        ComboBoxFilterType.setName("ComboBoxFilterType"); // NOI18N
        ComboBoxFilterType.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                ComboBoxFilterTypeItemStateChanged(evt);
            }
        });

        TextFieldFilterValues.setEditable(false);
        TextFieldFilterValues.setName("TextFieldFilterValues"); // NOI18N

        ButtonAddFilter.setText("Add filter");
        ButtonAddFilter.setName("ButtonAddFilter"); // NOI18N
        ButtonAddFilter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonAddFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelFiltersLayout = new javax.swing.GroupLayout(PanelFilters);
        PanelFilters.setLayout(PanelFiltersLayout);
        PanelFiltersLayout.setHorizontalGroup(
            PanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboBoxFilterType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollPaneFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(PanelFiltersLayout.createSequentialGroup()
                        .addComponent(ButtonRemoveFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonAddFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(TextFieldFilterValues))
                .addContainerGap())
        );
        PanelFiltersLayout.setVerticalGroup(
            PanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboBoxFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TextFieldFilterValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonRemoveFilter)
                    .addComponent(ButtonAddFilter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PanelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        TextAreaOutput.setColumns(20);
        TextAreaOutput.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        TextAreaOutput.setRows(5);
        ScrollPaneOutput.setViewportView(TextAreaOutput);

        javax.swing.GroupLayout PanelOutputLayout = new javax.swing.GroupLayout(PanelOutput);
        PanelOutput.setLayout(PanelOutputLayout);
        PanelOutputLayout.setHorizontalGroup(
            PanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelOutputLayout.setVerticalGroup(
            PanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanelActions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        BtnStart.setText("Start sending");
        BtnStart.setName("ButtonRemoveAddressee"); // NOI18N
        BtnStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BtnStartActionPerformed(evt);
            }
        });

        BtnStop.setText("Stop sending");
        BtnStop.setEnabled(false);
        BtnStop.setName("ButtonRemoveAddressee"); // NOI18N
        BtnStop.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BtnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelActionsLayout = new javax.swing.GroupLayout(PanelActions);
        PanelActions.setLayout(PanelActionsLayout);
        PanelActionsLayout.setHorizontalGroup(
            PanelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PanelActionsLayout.setVerticalGroup(
            PanelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnStart)
                    .addComponent(BtnStop))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PanelTelegram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelFilters, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelTelegram, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PanelFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(PanelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PanelActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Called by the Start button. Sets the GUI components properly and tells 
     * the TelegramManager to start sending.
     * 
     * @param evt 
     */
    private void BtnStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BtnStartActionPerformed
    {//GEN-HEADEREND:event_BtnStartActionPerformed
        updateGui(true);    // update GUI
        TextAreaOutput.setText(duration());
        
        try
        {
            tm.startSending(this);  // start sending telegrams
        }
        catch (Exception ex)
        {
            // if something went wrong while starting sending telegrams, reset GUI
            TextAreaOutput.setText(ex.getMessage());
            updateGui(false);
        }
    }//GEN-LAST:event_BtnStartActionPerformed

    /**
     * Called by the Stop button. Sets the GUI components properly, and tells
     * the telegram manager to stop sending.
     * 
     * @param evt 
     */
    private void BtnStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BtnStopActionPerformed
    {//GEN-HEADEREND:event_BtnStopActionPerformed
        // Call telegram manager to stop sending.
        tm.stopSending();
        
        // Set GUI components.
        updateGui(false);        
        TextAreaOutput.append("\nStopped!\n");
    }//GEN-LAST:event_BtnStopActionPerformed

    /**
     * Called when an item in the addressee-type combo box has been selected.
     * Properly enables or disables the textfield for nation/region names.
     * 
     * @param evt 
     */
    private void ComboBoxFilterTypeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_ComboBoxFilterTypeItemStateChanged
    {//GEN-HEADEREND:event_ComboBoxFilterTypeItemStateChanged
        // Only run this code if something was SELECTED.
        if (evt.getStateChange() != ItemEvent.SELECTED) 
        {
            return;
        }
        
        TextFieldFilterValues.setText("");  // Clear the textfield in question.
        
        // According to which item was selected, enable or disable the textfield.
        switch (FilterType.getViaText((String) evt.getItem()))
        {
            case NATIONS_INCL:
            case NATIONS_EXCL:
            case REGIONS_INCL:
            case REGIONS_EXCL:
            case REGIONS_WITH_TAGS_INCL:
            case REGIONS_WITH_TAGS_EXCL:
            case REGIONS_WO_TAGS_INCL:
            case REGIONS_WO_TAGS_EXCL:
                TextFieldFilterValues.setEditable(true);
                break;
            default:
                TextFieldFilterValues.setEditable(false);     
        }
    }//GEN-LAST:event_ComboBoxFilterTypeItemStateChanged

    /**
     * Called when anywhere in the form was clicked. Used for de-selecting an
     * addressee in the addressees list and disabling the remove-button.
     * 
     * @param evt 
     */
    private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
    {//GEN-HEADEREND:event_formMouseClicked
        JListFilters.clearSelection();
        ButtonRemoveFilter.setEnabled(false); 
    }//GEN-LAST:event_formMouseClicked

    /**
     * Called when the 'add addressee' button was clicked. Retrieves from the
     * server the nation names corresponding to the addressees to add (if applicable), 
     * tells the telegram manager to add these to its sending list, and updates 
     * the GUI to reflect the added addressees.
     * 
     * @param evt 
     */
    private void ButtonAddFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonAddFilterActionPerformed
    {//GEN-HEADEREND:event_ButtonAddFilterActionPerformed
        TextAreaOutput.setText("Compiling address list...");    // Inform user, as this might take a while.
        ButtonAddFilter.setEnabled(false);
        final FilterType filter = FilterType.getViaText((String) ComboBoxFilterType.getSelectedItem());  
        
        worker = new Thread(() ->
        {
            String type = filter.getText(); // Used for the text in the visual filter list.
            Set<String> addressees;  // Declared here as multiple cases need a string set.
            Filter f;    // The filter to add to the telegram manager.
            
            // Set above variables according to addressees type selected.
            switch (filter)
            {
                case ALL:
                    f = new FilterAll();       
                    break;
                case DELEGATES_EXCL:
                    f = new FilterDelegates(false);
                    break;
                case DELEGATES_INCL:
                    f = new FilterDelegates(true);
                    break;
                case DELEGATES_NEW:
                    f = new FilterDelegatesNew();
                    break;
                case NATIONS_EXCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterNations(addressees, false);
                    type += ": " + addressees;
                    break;
                case NATIONS_INCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterNations(addressees, true);
                    type += ": " + addressees;
                    break;
                case NATIONS_NEW:
                    f = new FilterNationsNew();
                    break;
                case NATIONS_REFOUNDED:
                    f = new FilterNationsRefounded();
                    break;                  
                case NATIONS_EJECTED:
                    f = new FilterNationsEjected();
                    break;
                case REGIONS_EXCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegions(addressees, false);
                    type += ": " + addressees;
                    break;
                case REGIONS_INCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegions(addressees, true);
                    type += ": " + addressees;
                    break;
                case REGIONS_WITH_TAGS_EXCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegionsWithTags(addressees, false);
                    type += ": " + addressees;
                    break;
                case REGIONS_WITH_TAGS_INCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegionsWithTags(addressees, true);
                    type += ": " + addressees;
                    break;
                case REGIONS_WO_TAGS_EXCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegionsWithoutTags(addressees, false);
                    type += ": " + addressees;
                    break;
                case REGIONS_WO_TAGS_INCL:
                    addressees = stringToStringList(TextFieldFilterValues.getText());
                    f = new FilterRegionsWithoutTags(addressees, true);
                    type += ": " + addressees;
                    break;
                case WA_MEMBERS_EXCL:
                    f = new FilterWAMembers(false);
                    break;
                case WA_MEMBERS_INCL:
                    f = new FilterWAMembers(true);
                    break;
                default:
                    return;
            }
            
            // Update telegram manager and GUI.
            tm.addFilter(f);
            final String finalType = type;
            
            SwingUtilities.invokeLater(() ->
            {
                ((DefaultListModel)JListFilters.getModel()).addElement(finalType);
                // Calculate estimated duration to send telegrams, then set it to output.
                TextAreaOutput.setText(duration());
                ButtonAddFilter.setEnabled(true);
            });
        });
        worker.start();
    }//GEN-LAST:event_ButtonAddFilterActionPerformed

    /**
     * Called when the 'remove addressee' button was clicked. Tells the telegram
     * manager to remove the selected addressees, and updates the GUI to reflect the change.
     * 
     * @param evt 
     */
    private void ButtonRemoveFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonRemoveFilterActionPerformed
    {//GEN-HEADEREND:event_ButtonRemoveFilterActionPerformed
        int index = JListFilters.getSelectedIndex();
        tm.removeFilterAt(index);
        ((DefaultListModel)JListFilters.getModel()).remove(index);
        
        ButtonRemoveFilter.setEnabled(false);
        JListFilters.clearSelection();
        TextAreaOutput.setText(duration());
    }//GEN-LAST:event_ButtonRemoveFilterActionPerformed

    /**
     * Called when the application is closing. Makes sure the properties file
     * is updated with the new values in the textboxes.
     * 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // Store relevant variables to properties file.
        final PropertiesManager ph = new PropertiesManager();
        ph.ClientKey = tm.ClientKey;
        ph.TelegramId = tm.TelegramId;
        ph.SecretKey = tm.SecretKey;
        ph.IsRecruitment = tm.SendAsRecruitment;
        ph.saveProperties();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Called when an item in the addressees list is selected. Enables the
     * 'remove addressee'-button.
     * 
     * @param evt 
     */
    private void JListFiltersValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_JListFiltersValueChanged
    {//GEN-HEADEREND:event_JListFiltersValueChanged
        if (!evt.getValueIsAdjusting() && JListFilters.getSelectedIndex() != -1)
            ButtonRemoveFilter.setEnabled(true);       
    }//GEN-LAST:event_JListFiltersValueChanged

    /**
     * Updates Telegram Id value on key release.
     * 
     * @param evt 
     */
    private void TxtFieldClientKeyKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TxtFieldClientKeyKeyReleased
    {//GEN-HEADEREND:event_TxtFieldClientKeyKeyReleased
        tm.ClientKey = TxtFieldClientKey.getText();
    }//GEN-LAST:event_TxtFieldClientKeyKeyReleased

    /**
     * Updates Secret Key value on key release.
     * 
     * @param evt 
     */
    private void TxtFieldSecretKeyKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TxtFieldSecretKeyKeyReleased
    {//GEN-HEADEREND:event_TxtFieldSecretKeyKeyReleased
        tm.SecretKey = TxtFieldSecretKey.getText();
    }//GEN-LAST:event_TxtFieldSecretKeyKeyReleased

    /**
     * Updates Client Key value on key release.
     * 
     * @param evt 
     */
    private void TxtFieldTelegramIdKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TxtFieldTelegramIdKeyReleased
    {//GEN-HEADEREND:event_TxtFieldTelegramIdKeyReleased
        tm.TelegramId = TxtFieldTelegramId.getText();
    }//GEN-LAST:event_TxtFieldTelegramIdKeyReleased

    /**
     * Called when selected status of recruitment checkbox has changed.
     * 
     * @param evt 
     */
    private void CheckBoxRecruitingStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_CheckBoxRecruitingStateChanged
    {//GEN-HEADEREND:event_CheckBoxRecruitingStateChanged
        tm.SendAsRecruitment = CheckBoxRecruiting.isSelected();
        TextAreaOutput.setText(duration());
        
    }//GEN-LAST:event_CheckBoxRecruitingStateChanged

    /**
     * Called when selected status of looping checkbox has changed.
     * 
     * @param evt 
     */
    private void CheckBoxLoopStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_CheckBoxLoopStateChanged
    {//GEN-HEADEREND:event_CheckBoxLoopStateChanged
        tm.IsLooping = CheckBoxLoop.isSelected();
    }//GEN-LAST:event_CheckBoxLoopStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> 
            {
                NSTelegramForm form = new NSTelegramForm();
                form.setLocationRelativeTo(null);
                form.setVisible(true);
            });
        }
        catch (ClassNotFoundException | InstantiationException |
                IllegalAccessException |
                UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(NSTelegramForm.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BtnGrpTelegramType;
    private javax.swing.JButton BtnStart;
    private javax.swing.JButton BtnStop;
    private javax.swing.JButton ButtonAddFilter;
    private javax.swing.JButton ButtonRemoveFilter;
    private javax.swing.JCheckBox CheckBoxLoop;
    private javax.swing.JCheckBox CheckBoxRecruiting;
    private javax.swing.JComboBox<String> ComboBoxFilterType;
    private javax.swing.JList<String> JListFilters;
    private javax.swing.JLabel LabelClientKey;
    private javax.swing.JLabel LabelLoop;
    private javax.swing.JLabel LabelRecruiting;
    private javax.swing.JLabel LabelSecretKey;
    private javax.swing.JLabel LabelTelegramId;
    private javax.swing.JPanel PanelActions;
    private javax.swing.JPanel PanelFilters;
    private javax.swing.JPanel PanelOutput;
    private javax.swing.JPanel PanelTelegram;
    private javax.swing.JScrollPane ScrollPaneFilters;
    private javax.swing.JScrollPane ScrollPaneOutput;
    private javax.swing.JTextArea TextAreaOutput;
    private javax.swing.JTextField TextFieldFiller1;
    private javax.swing.JTextField TextFieldFiller2;
    private javax.swing.JTextField TextFieldFilterValues;
    private javax.swing.JTextField TxtFieldClientKey;
    private javax.swing.JTextField TxtFieldSecretKey;
    private javax.swing.JTextField TxtFieldTelegramId;
    // End of variables declaration//GEN-END:variables

    /**
     * Called when the telegram manager has sent a telegram. Prints information
     * to the output textarea. If the telegram manager has sent the final telegram,
     * then the GUI is updated to reflect this.
     * 
     * @param event 
     */
    @Override
    public void handleTelegramSent(TelegramSentEvent event)
    {
        // Print info to output.
        String message = "[" + LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")) + "]";        
        if (event.Queued)
        {
            message += " queued telegram for '" + event.Addressee + "'\n";
        }
        else
        {
            message += " failed to queue telegram for '" + event.Addressee + "'\n"
                    + event.ErrorMessage + "\n";
        }       
        TextAreaOutput.append(message);
        
        // If all telegrams were sent, reset the buttons.
        if (event.PositionInQuery + 1 == tm.numberOfAddressees())
        {
            updateGui(false);
            TextAreaOutput.append("\nFinished!\n");
        }
    }
    
    /**
     * Updates the GUI according to whether we've begun sending telegrams, or
     * stopped sending telegrams.
     * 
     * @param sending 
     */
    private void updateGui(boolean sending)
    {
        if (sending)
        {
            BtnStart.setEnabled(false);
            BtnStop.setEnabled(true);
            JListFilters.setEnabled(false);
            ButtonAddFilter.setEnabled(false);
            ButtonRemoveFilter.setEnabled(false);
            TxtFieldClientKey.setEditable(false);
            TxtFieldTelegramId.setEditable(false);
            TxtFieldSecretKey.setEditable(false);
            CheckBoxRecruiting.setEnabled(false);
            CheckBoxLoop.setEnabled(false);
            ComboBoxFilterType.setEnabled(false);
        }
        else
        {
            BtnStart.setEnabled(true);
            BtnStop.setEnabled(false);
            JListFilters.setEnabled(true);
            ButtonAddFilter.setEnabled(true);
            TxtFieldClientKey.setEditable(true);
            TxtFieldTelegramId.setEditable(true);
            TxtFieldSecretKey.setEditable(true);
            CheckBoxRecruiting.setEnabled(true);
            CheckBoxLoop.setEnabled(true);
            ComboBoxFilterType.setEnabled(true);
        }
    }
    
    /**
     * Calculates the estimated duration of sending all the telegrams, and 
     * returns it in a formatted string.
     * 
     * @return 
     */
    private String duration()
    {
        int estimatedDuration = Math.max(tm.numberOfAddressees() - 1, 0) 
                                * (CheckBoxRecruiting.isSelected() ? 31 : 181);
        int hours = estimatedDuration / 3600;
        int minutes = estimatedDuration % 3600 / 60;
        int seconds = estimatedDuration % 3600 % 60;
        return String.format("Addressees selected: %s%nEstimated duration: "
                + "%s hours, %s minutes, %s seconds\n\n"
                , tm.numberOfAddressees(), hours, minutes, seconds);
    }
    
    /**
     * Converts a comma-separated string to a list of strings.
     * 
     * @param string
     * @return 
     */
    private static Set<String> stringToStringList(String string)
    {
        List<String> asList = Arrays.asList(string.trim().split("\\s*,\\s*"));
        return asList.size() == 1 && asList.get(0).isEmpty() ? new HashSet<>() : new HashSet<>(asList);
    }
}
